'''
You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
'''

from collections import deque
class Solution:
    def wallsAndGates(self, rooms):
        rows, col= len(rooms), len(rooms[0])
        visit=set()
        q=deque()

        def addRoom(r,c):
            if (r<0 or r==rows or c<0 or c==col or (r,c) in visit or rooms[r][c]==-1):
                return
            visit.add((r,c))
            q.append([r,c])

        for r in range(rows):
            for c in range(col):
                if rooms[r][c]==0 and (r,c) not in visit:
                    visit.add((r,c))
                    q.append([r,c])
        
        dist=0
        directions=[[-1,0],[1,0],[0,1],[0,-1]]
        while q:
            for i in range(len(q)):
                r,c=q.popleft()
                rooms[r][c]=dist
                for dr, dc in directions:
                    addRoom(r+dr, c+dc)
            
            dist+=1
