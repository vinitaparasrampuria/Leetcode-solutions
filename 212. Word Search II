'''
Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example 1:


Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
Example 2:


Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
'''

class TrieNode:
    def __init__(self):
        self.children={}
        self.isWord=False
        self.ref=0
    
    def addWord(self, word):
        cur=self
        cur.ref+=1
        for w in word:
            if w not in cur.children:
                cur.children[w]=TrieNode()
            cur=cur.children[w]
            cur.ref+=1
        cur.isWord=True

    def removeWord(self, word):
        cur=self
        cur.ref-=1
        for w in word:
            if w in cur.children:
                cur=cur.children[w]
                cur.ref-=1

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root=TrieNode()
        for word in words:
            root.addWord(word)

        visit=set()
        res=set()
        ROWS=len(board)
        COLS=len(board[0])

        def dfs(r,c, node, word):
            if (r<0 or r>=ROWS or c<0 or c>=COLS or board[r][c] not in node.children or
                (r,c) in visit or node.children[board[r][c]].ref<1):
                return
            
            visit.add((r,c))
            node=node.children[board[r][c]]
            word+=board[r][c]
            if node.isWord:
                node.isWord=False
                res.add(word)
                root.removeWord(word)     
            
            dfs(r+1, c, node, word)
            dfs(r-1, c, node, word)
            dfs(r, c-1, node, word)
            dfs(r, c+1, node, word)
            visit.remove((r,c))
        
        for i in range(ROWS):
            for j in range(COLS):
                dfs(i,j,root,"")

        return list(res)
